// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.11.4
// source: test/rpc/rank.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetSortAndExtendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSortData bool  `protobuf:"varint,1,opt,name=IsSortData,proto3" json:"IsSortData,omitempty"` //是否为排序字段,为true时，修改Sort字段，否则修改Extend数据
	Pos        int32 `protobuf:"varint,2,opt,name=Pos,proto3" json:"Pos,omitempty"`               //排序位置
	Data       int64 `protobuf:"varint,3,opt,name=Data,proto3" json:"Data,omitempty"`             //排序值
}

func (x *SetSortAndExtendData) Reset() {
	*x = SetSortAndExtendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSortAndExtendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSortAndExtendData) ProtoMessage() {}

func (x *SetSortAndExtendData) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSortAndExtendData.ProtoReflect.Descriptor instead.
func (*SetSortAndExtendData) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{0}
}

func (x *SetSortAndExtendData) GetIsSortData() bool {
	if x != nil {
		return x.IsSortData
	}
	return false
}

func (x *SetSortAndExtendData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SetSortAndExtendData) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

// 自增值
type IncreaseRankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId                  uint64                  `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"`                                   //排行榜的ID
	Key                     uint64                  `protobuf:"varint,2,opt,name=Key,proto3" json:"Key,omitempty"`                                         //数据主建
	Extend                  []*ExtendIncData        `protobuf:"bytes,3,rep,name=Extend,proto3" json:"Extend,omitempty"`                                    //扩展数据
	IncreaseSortData        []int64                 `protobuf:"varint,4,rep,packed,name=IncreaseSortData,proto3" json:"IncreaseSortData,omitempty"`        //自增排行数值
	SetSortAndExtendData    []*SetSortAndExtendData `protobuf:"bytes,5,rep,name=SetSortAndExtendData,proto3" json:"SetSortAndExtendData,omitempty"`        //设置排序数据值
	ReturnRankData          bool                    `protobuf:"varint,6,opt,name=ReturnRankData,proto3" json:"ReturnRankData,omitempty"`                   //是否查找最新排名，否则不返回排行Rank字段
	InsertDataOnNonExistent bool                    `protobuf:"varint,7,opt,name=InsertDataOnNonExistent,proto3" json:"InsertDataOnNonExistent,omitempty"` //为true时:存在不进行更新，不存在则插入InitData与InitSortData数据。为false时：忽略不对InitData与InitSortData数据
	InitData                []byte                  `protobuf:"bytes,8,opt,name=InitData,proto3" json:"InitData,omitempty"`                                //不参与排行的数据
	InitSortData            []int64                 `protobuf:"varint,9,rep,packed,name=InitSortData,proto3" json:"InitSortData,omitempty"`                //参与排行的数据
}

func (x *IncreaseRankData) Reset() {
	*x = IncreaseRankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseRankData) ProtoMessage() {}

func (x *IncreaseRankData) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseRankData.ProtoReflect.Descriptor instead.
func (*IncreaseRankData) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{1}
}

func (x *IncreaseRankData) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *IncreaseRankData) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *IncreaseRankData) GetExtend() []*ExtendIncData {
	if x != nil {
		return x.Extend
	}
	return nil
}

func (x *IncreaseRankData) GetIncreaseSortData() []int64 {
	if x != nil {
		return x.IncreaseSortData
	}
	return nil
}

func (x *IncreaseRankData) GetSetSortAndExtendData() []*SetSortAndExtendData {
	if x != nil {
		return x.SetSortAndExtendData
	}
	return nil
}

func (x *IncreaseRankData) GetReturnRankData() bool {
	if x != nil {
		return x.ReturnRankData
	}
	return false
}

func (x *IncreaseRankData) GetInsertDataOnNonExistent() bool {
	if x != nil {
		return x.InsertDataOnNonExistent
	}
	return false
}

func (x *IncreaseRankData) GetInitData() []byte {
	if x != nil {
		return x.InitData
	}
	return nil
}

func (x *IncreaseRankData) GetInitSortData() []int64 {
	if x != nil {
		return x.InitSortData
	}
	return nil
}

type IncreaseRankDataRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosData *RankPosData `protobuf:"bytes,1,opt,name=PosData,proto3" json:"PosData,omitempty"`
}

func (x *IncreaseRankDataRet) Reset() {
	*x = IncreaseRankDataRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseRankDataRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseRankDataRet) ProtoMessage() {}

func (x *IncreaseRankDataRet) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseRankDataRet.ProtoReflect.Descriptor instead.
func (*IncreaseRankDataRet) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{2}
}

func (x *IncreaseRankDataRet) GetPosData() *RankPosData {
	if x != nil {
		return x.PosData
	}
	return nil
}

// 用于单独刷新排行榜数据
type UpdateRankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId uint64 `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"` //排行榜的ID
	Key    uint64 `protobuf:"varint,2,opt,name=Key,proto3" json:"Key,omitempty"`       //数据主建
	Data   []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`      //数据部分
}

func (x *UpdateRankData) Reset() {
	*x = UpdateRankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRankData) ProtoMessage() {}

func (x *UpdateRankData) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRankData.ProtoReflect.Descriptor instead.
func (*UpdateRankData) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRankData) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *UpdateRankData) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *UpdateRankData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateRankDataRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret bool `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
}

func (x *UpdateRankDataRet) Reset() {
	*x = UpdateRankDataRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRankDataRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRankDataRet) ProtoMessage() {}

func (x *UpdateRankDataRet) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRankDataRet.ProtoReflect.Descriptor instead.
func (*UpdateRankDataRet) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRankDataRet) GetRet() bool {
	if x != nil {
		return x.Ret
	}
	return false
}

// RankPosData 排行数据——查询返回
type RankPosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        uint64  `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`                      //数据主建
	Rank       uint64  `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`                    //名次
	SortData   []int64 `protobuf:"varint,3,rep,packed,name=SortData,proto3" json:"SortData,omitempty"`     //参与排行的数据
	Data       []byte  `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`                     //不参与排行的数据
	ExtendData []int64 `protobuf:"varint,5,rep,packed,name=ExtendData,proto3" json:"ExtendData,omitempty"` //扩展数据
}

func (x *RankPosData) Reset() {
	*x = RankPosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankPosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankPosData) ProtoMessage() {}

func (x *RankPosData) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankPosData.ProtoReflect.Descriptor instead.
func (*RankPosData) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{5}
}

func (x *RankPosData) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *RankPosData) GetRank() uint64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankPosData) GetSortData() []int64 {
	if x != nil {
		return x.SortData
	}
	return nil
}

func (x *RankPosData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RankPosData) GetExtendData() []int64 {
	if x != nil {
		return x.ExtendData
	}
	return nil
}

// RankList 排行榜数据
type RankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId        uint64 `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"`               //排行榜类型
	RankName      string `protobuf:"bytes,2,opt,name=RankName,proto3" json:"RankName,omitempty"`            //排行榜名称
	SkipListLevel int32  `protobuf:"varint,3,opt,name=SkipListLevel,proto3" json:"SkipListLevel,omitempty"` //排行榜level-生成的跳表的level, 8/16/32/64等
	IsDec         bool   `protobuf:"varint,4,opt,name=IsDec,proto3" json:"IsDec,omitempty"`                 //不参与排行的数据
	MaxRank       uint64 `protobuf:"varint,5,opt,name=MaxRank,proto3" json:"MaxRank,omitempty"`             //最大排名
	ExpireMs      int64  `protobuf:"varint,6,opt,name=ExpireMs,proto3" json:"ExpireMs,omitempty"`           //有效时间，0永不过期
}

func (x *RankList) Reset() {
	*x = RankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankList) ProtoMessage() {}

func (x *RankList) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankList.ProtoReflect.Descriptor instead.
func (*RankList) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{6}
}

func (x *RankList) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *RankList) GetRankName() string {
	if x != nil {
		return x.RankName
	}
	return ""
}

func (x *RankList) GetSkipListLevel() int32 {
	if x != nil {
		return x.SkipListLevel
	}
	return 0
}

func (x *RankList) GetIsDec() bool {
	if x != nil {
		return x.IsDec
	}
	return false
}

func (x *RankList) GetMaxRank() uint64 {
	if x != nil {
		return x.MaxRank
	}
	return 0
}

func (x *RankList) GetExpireMs() int64 {
	if x != nil {
		return x.ExpireMs
	}
	return 0
}

// UpsetRankData 更新排行榜数据
type UpsetRankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId       uint64      `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"`            //排行榜的ID
	RankDataList []*RankData `protobuf:"bytes,2,rep,name=RankDataList,proto3" json:"RankDataList,omitempty"` //排行数据
	FindNewRank  bool        `protobuf:"varint,3,opt,name=FindNewRank,proto3" json:"FindNewRank,omitempty"`  //是否查找最新排名
}

func (x *UpsetRankData) Reset() {
	*x = UpsetRankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsetRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsetRankData) ProtoMessage() {}

func (x *UpsetRankData) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsetRankData.ProtoReflect.Descriptor instead.
func (*UpsetRankData) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{7}
}

func (x *UpsetRankData) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *UpsetRankData) GetRankDataList() []*RankData {
	if x != nil {
		return x.RankDataList
	}
	return nil
}

func (x *UpsetRankData) GetFindNewRank() bool {
	if x != nil {
		return x.FindNewRank
	}
	return false
}

type ExtendIncData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitValue     int64 `protobuf:"varint,1,opt,name=InitValue,proto3" json:"InitValue,omitempty"`
	IncreaseValue int64 `protobuf:"varint,2,opt,name=IncreaseValue,proto3" json:"IncreaseValue,omitempty"`
}

func (x *ExtendIncData) Reset() {
	*x = ExtendIncData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendIncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendIncData) ProtoMessage() {}

func (x *ExtendIncData) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendIncData.ProtoReflect.Descriptor instead.
func (*ExtendIncData) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{8}
}

func (x *ExtendIncData) GetInitValue() int64 {
	if x != nil {
		return x.InitValue
	}
	return 0
}

func (x *ExtendIncData) GetIncreaseValue() int64 {
	if x != nil {
		return x.IncreaseValue
	}
	return 0
}

// RankData 排行数据
type RankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      uint64           `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`                  //数据主建
	SortData []int64          `protobuf:"varint,2,rep,packed,name=SortData,proto3" json:"SortData,omitempty"` //参与排行的数据
	Data     []byte           `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`                 //不参与排行的数据
	ExData   []*ExtendIncData `protobuf:"bytes,4,rep,name=ExData,proto3" json:"ExData,omitempty"`             //扩展增量数据
}

func (x *RankData) Reset() {
	*x = RankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankData) ProtoMessage() {}

func (x *RankData) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankData.ProtoReflect.Descriptor instead.
func (*RankData) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{9}
}

func (x *RankData) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *RankData) GetSortData() []int64 {
	if x != nil {
		return x.SortData
	}
	return nil
}

func (x *RankData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RankData) GetExData() []*ExtendIncData {
	if x != nil {
		return x.ExData
	}
	return nil
}

// DeleteByKey 删除排行榜数据
type DeleteByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId  uint64   `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"`          //排行榜的分类ID
	KeyList []uint64 `protobuf:"varint,2,rep,packed,name=KeyList,proto3" json:"KeyList,omitempty"` //排行数据
}

func (x *DeleteByKey) Reset() {
	*x = DeleteByKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByKey) ProtoMessage() {}

func (x *DeleteByKey) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByKey.ProtoReflect.Descriptor instead.
func (*DeleteByKey) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteByKey) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *DeleteByKey) GetKeyList() []uint64 {
	if x != nil {
		return x.KeyList
	}
	return nil
}

// AddRankList 新增排行榜
type AddRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddList []*RankList `protobuf:"bytes,1,rep,name=AddList,proto3" json:"AddList,omitempty"` //添加的排行榜列表
}

func (x *AddRankList) Reset() {
	*x = AddRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRankList) ProtoMessage() {}

func (x *AddRankList) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRankList.ProtoReflect.Descriptor instead.
func (*AddRankList) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{11}
}

func (x *AddRankList) GetAddList() []*RankList {
	if x != nil {
		return x.AddList
	}
	return nil
}

// FindRankDataByKey 查找排行信息
type FindRankDataByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId uint64 `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"` //排行榜的ID
	Key    uint64 `protobuf:"varint,2,opt,name=Key,proto3" json:"Key,omitempty"`       //排行的key
}

func (x *FindRankDataByKey) Reset() {
	*x = FindRankDataByKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRankDataByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRankDataByKey) ProtoMessage() {}

func (x *FindRankDataByKey) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRankDataByKey.ProtoReflect.Descriptor instead.
func (*FindRankDataByKey) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{12}
}

func (x *FindRankDataByKey) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *FindRankDataByKey) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

// FindRankDataByRank 查找排行信息
type FindRankDataByRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId uint64 `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"` //排行榜的ID
	Rank   uint64 `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`     //排行名次
}

func (x *FindRankDataByRank) Reset() {
	*x = FindRankDataByRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRankDataByRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRankDataByRank) ProtoMessage() {}

func (x *FindRankDataByRank) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRankDataByRank.ProtoReflect.Descriptor instead.
func (*FindRankDataByRank) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{13}
}

func (x *FindRankDataByRank) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *FindRankDataByRank) GetRank() uint64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// FindRankDataList 查找排行信息
type FindRankDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId    uint64 `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"`       //排行榜的ID
	StartRank uint64 `protobuf:"varint,2,opt,name=StartRank,proto3" json:"StartRank,omitempty"` //排行的位置 0开始
	Count     uint64 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`         //查询格式
	Key       uint64 `protobuf:"varint,4,opt,name=Key,proto3" json:"Key,omitempty"`             //附带一个Key查询排行信息
}

func (x *FindRankDataList) Reset() {
	*x = FindRankDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRankDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRankDataList) ProtoMessage() {}

func (x *FindRankDataList) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRankDataList.ProtoReflect.Descriptor instead.
func (*FindRankDataList) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{14}
}

func (x *FindRankDataList) GetRankId() uint64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *FindRankDataList) GetStartRank() uint64 {
	if x != nil {
		return x.StartRank
	}
	return 0
}

func (x *FindRankDataList) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FindRankDataList) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

// RankDataList
type RankDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankDataCount   uint64         `protobuf:"varint,1,opt,name=RankDataCount,proto3" json:"RankDataCount,omitempty"`    //排行长度
	RankPosDataList []*RankPosData `protobuf:"bytes,2,rep,name=RankPosDataList,proto3" json:"RankPosDataList,omitempty"` //排行数据
	KeyRank         *RankPosData   `protobuf:"bytes,3,opt,name=KeyRank,proto3" json:"KeyRank,omitempty"`                 //附带的Key查询排行结果信息
}

func (x *RankDataList) Reset() {
	*x = RankDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankDataList) ProtoMessage() {}

func (x *RankDataList) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankDataList.ProtoReflect.Descriptor instead.
func (*RankDataList) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{15}
}

func (x *RankDataList) GetRankDataCount() uint64 {
	if x != nil {
		return x.RankDataCount
	}
	return 0
}

func (x *RankDataList) GetRankPosDataList() []*RankPosData {
	if x != nil {
		return x.RankPosDataList
	}
	return nil
}

func (x *RankDataList) GetKeyRank() *RankPosData {
	if x != nil {
		return x.KeyRank
	}
	return nil
}

type RankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  uint64 `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Rank uint64 `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
}

func (x *RankInfo) Reset() {
	*x = RankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfo) ProtoMessage() {}

func (x *RankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfo.ProtoReflect.Descriptor instead.
func (*RankInfo) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{16}
}

func (x *RankInfo) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *RankInfo) GetRank() uint64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// RankResult
type RankResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddCount    int32       `protobuf:"varint,1,opt,name=AddCount,proto3" json:"AddCount,omitempty"`       //新增数量
	ModifyCount int32       `protobuf:"varint,2,opt,name=ModifyCount,proto3" json:"ModifyCount,omitempty"` //修改数量
	RemoveCount int32       `protobuf:"varint,3,opt,name=RemoveCount,proto3" json:"RemoveCount,omitempty"` //删除数量
	NewRank     []*RankInfo `protobuf:"bytes,4,rep,name=NewRank,proto3" json:"NewRank,omitempty"`          //新的排名名次，只有UpsetRankData.FindNewRank为true时才生效
}

func (x *RankResult) Reset() {
	*x = RankResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_rpc_rank_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankResult) ProtoMessage() {}

func (x *RankResult) ProtoReflect() protoreflect.Message {
	mi := &file_test_rpc_rank_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankResult.ProtoReflect.Descriptor instead.
func (*RankResult) Descriptor() ([]byte, []int) {
	return file_test_rpc_rank_proto_rawDescGZIP(), []int{17}
}

func (x *RankResult) GetAddCount() int32 {
	if x != nil {
		return x.AddCount
	}
	return 0
}

func (x *RankResult) GetModifyCount() int32 {
	if x != nil {
		return x.ModifyCount
	}
	return 0
}

func (x *RankResult) GetRemoveCount() int32 {
	if x != nil {
		return x.RemoveCount
	}
	return 0
}

func (x *RankResult) GetNewRank() []*RankInfo {
	if x != nil {
		return x.NewRank
	}
	return nil
}

var File_test_rpc_rank_proto protoreflect.FileDescriptor

var file_test_rpc_rank_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0x5c, 0x0a, 0x14, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x85, 0x03, 0x0a, 0x10, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4d, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x6e, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x41, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x52,
	0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xb0, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x44, 0x65, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x4d, 0x73, 0x22, 0x7c, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c,
	0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e,
	0x6b, 0x22, 0x53, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x06, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x45, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x3f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x36, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x70, 0x0a, 0x10, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x9c, 0x01, 0x0a,
	0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x30, 0x0a, 0x08, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x95, 0x01,
	0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07,
	0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4e, 0x65,
	0x77, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_rpc_rank_proto_rawDescOnce sync.Once
	file_test_rpc_rank_proto_rawDescData = file_test_rpc_rank_proto_rawDesc
)

func file_test_rpc_rank_proto_rawDescGZIP() []byte {
	file_test_rpc_rank_proto_rawDescOnce.Do(func() {
		file_test_rpc_rank_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_rpc_rank_proto_rawDescData)
	})
	return file_test_rpc_rank_proto_rawDescData
}

var file_test_rpc_rank_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_test_rpc_rank_proto_goTypes = []interface{}{
	(*SetSortAndExtendData)(nil), // 0: rpc.SetSortAndExtendData
	(*IncreaseRankData)(nil),     // 1: rpc.IncreaseRankData
	(*IncreaseRankDataRet)(nil),  // 2: rpc.IncreaseRankDataRet
	(*UpdateRankData)(nil),       // 3: rpc.UpdateRankData
	(*UpdateRankDataRet)(nil),    // 4: rpc.UpdateRankDataRet
	(*RankPosData)(nil),          // 5: rpc.RankPosData
	(*RankList)(nil),             // 6: rpc.RankList
	(*UpsetRankData)(nil),        // 7: rpc.UpsetRankData
	(*ExtendIncData)(nil),        // 8: rpc.ExtendIncData
	(*RankData)(nil),             // 9: rpc.RankData
	(*DeleteByKey)(nil),          // 10: rpc.DeleteByKey
	(*AddRankList)(nil),          // 11: rpc.AddRankList
	(*FindRankDataByKey)(nil),    // 12: rpc.FindRankDataByKey
	(*FindRankDataByRank)(nil),   // 13: rpc.FindRankDataByRank
	(*FindRankDataList)(nil),     // 14: rpc.FindRankDataList
	(*RankDataList)(nil),         // 15: rpc.RankDataList
	(*RankInfo)(nil),             // 16: rpc.RankInfo
	(*RankResult)(nil),           // 17: rpc.RankResult
}
var file_test_rpc_rank_proto_depIdxs = []int32{
	8,  // 0: rpc.IncreaseRankData.Extend:type_name -> rpc.ExtendIncData
	0,  // 1: rpc.IncreaseRankData.SetSortAndExtendData:type_name -> rpc.SetSortAndExtendData
	5,  // 2: rpc.IncreaseRankDataRet.PosData:type_name -> rpc.RankPosData
	9,  // 3: rpc.UpsetRankData.RankDataList:type_name -> rpc.RankData
	8,  // 4: rpc.RankData.ExData:type_name -> rpc.ExtendIncData
	6,  // 5: rpc.AddRankList.AddList:type_name -> rpc.RankList
	5,  // 6: rpc.RankDataList.RankPosDataList:type_name -> rpc.RankPosData
	5,  // 7: rpc.RankDataList.KeyRank:type_name -> rpc.RankPosData
	16, // 8: rpc.RankResult.NewRank:type_name -> rpc.RankInfo
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_test_rpc_rank_proto_init() }
func file_test_rpc_rank_proto_init() {
	if File_test_rpc_rank_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_rpc_rank_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSortAndExtendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseRankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseRankDataRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRankDataRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankPosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsetRankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendIncData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRankDataByKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRankDataByRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRankDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_rpc_rank_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_rpc_rank_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_rpc_rank_proto_goTypes,
		DependencyIndexes: file_test_rpc_rank_proto_depIdxs,
		MessageInfos:      file_test_rpc_rank_proto_msgTypes,
	}.Build()
	File_test_rpc_rank_proto = out.File
	file_test_rpc_rank_proto_rawDesc = nil
	file_test_rpc_rank_proto_goTypes = nil
	file_test_rpc_rank_proto_depIdxs = nil
}
